<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="IxDFCodingStandard" xsi:noNamespaceSchemaLocation="../vendor/squizlabs/php_codesniffer/phpcs.xsd">
    <description>The IxDF coding standard for Laravel applications.</description>

    <!-- CS can also check js, inc, lib file - omit them -->
    <arg name="extensions" value="php"/>

    <!-- Use colors in output -->
    <arg name="colors"/>
    <!-- Show progress of the run -->
    <arg value="p"/>
    <!-- Show sniff codes in all reports -->
    <arg value="s"/>
    <arg name="report-width" value="120"/>

    <!-- PSR2 ruleset: -->
    <!-- Disallow else if in favor of elseif -->
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration.NotAllowed">
        <type>error</type>
    </rule>
    <!-- PSR2 ruleset end. -->

    <!-- PSR12 ruleset (includes PSR1 + most of PSR2 + some Generic rules). -->
    <rule ref="PSR12">
        <!-- Not ready for readonly classes (PHP 8.2) -->
        <exclude name="PSR1.Files.SideEffects.FoundWithSymbols"/>

        <!-- Need to exclude concatenation rule but there is no such option :( -->
        <exclude name="PSR12.Operators.OperatorSpacing"/>
        <!-- We use <?php declare(strict_types=1);\n as more readable option -->
        <exclude name="PSR12.Files.OpenTag.NotAlone"/>
        <!-- checked by SlevomatCodingStandard.Namespaces.UseSpacing -->
        <exclude name="PSR12.Files.FileHeader"/>
        <exclude name="PSR12.ControlStructures.ControlStructureSpacing.FirstExpressionLine"/>

        <!-- checked by PSR12.ControlStructures.ControlStructureSpacing -->
        <exclude name="PSR2.ControlStructures.ControlStructureSpacing.SpacingAfterOpenBrace"/>
        <!-- checked by SlevomatCodingStandard.Namespaces.UseSpacing -->
        <exclude name="PSR2.Namespaces.UseDeclaration.SpaceAfterLastUse"/>
        <!-- checked by SlevomatCodingStandard.Namespaces.NamespaceSpacing -->
        <exclude name="PSR2.Namespaces.NamespaceDeclaration.BlankLineAfter"/>
        <!-- checked by SlevomatCodingStandard.Operators.SpreadOperatorSpacing -->
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterVariadic"/>
        <!-- checked by SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing -->
        <exclude name="PSR12.Functions.ReturnTypeDeclaration"/>
        <!-- checked by SlevomatCodingStandard.Classes.TraitUseSpacing -->
        <exclude name="PSR12.Traits.UseDeclaration"/>
        <!-- checked by SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing.WhitespaceAfterNullabilitySymbol -->
        <exclude name="PSR12.Functions.NullableTypeDeclaration.WhitespaceFound"/>
    </rule>
    <!-- PSR12 ruleset end. -->

    <!-- Generic ruleset: -->
    <!-- Force array element indentation with 4 spaces -->
    <rule ref="Generic.Arrays.ArrayIndent">
        <exclude name="Generic.Arrays.ArrayIndent.CloseBraceNotNewLine"/>
    </rule>
    <!-- Forbid `array(...)` -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <!-- Forbid duplicate classes -->
    <rule ref="Generic.Classes.DuplicateClassName"/>
    <!-- Forbid empty statements -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement">
        <!-- But allow empty catch -->
        <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"/>
    </rule>
    <!-- Warn about variable assignments inside conditions -->
    <rule ref="Generic.CodeAnalysis.AssignmentInCondition"/>
    <!-- Forbid final methods in final classes -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
    <!-- Forbid useless empty method overrides -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter">
        <!-- But allow specifying unused params not the last parameters that are used. Needed for code not owned by us. -->
        <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundBeforeLastUsed"/>
        <!-- But allow specifying unused params for methods declared in parent classes -->
        <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInExtendedClass"/>
        <!-- But allow specifying unused params for methods declared in parent classes -->
        <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInExtendedClassBeforeLastUsed"/>
        <!-- But allow specifying unused params for methods declared in parent classes -->
        <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInExtendedClassAfterLastUsed"/>
        <!-- But allow specifying unused params for methods declared in parent interface -->
        <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInImplementedInterface"/>
        <!-- But allow specifying unused params for methods declared in parent interface -->
        <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInImplementedInterfaceBeforeLastUsed"/>
        <!-- But allow specifying unused params for methods declared in parent interface -->
        <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInImplementedInterfaceAfterLastUsed"/>
    </rule>
    <!-- Detects the usage of one and the same incrementer into an outer and an inner -->
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <rule ref="Generic.Commenting.Fixme"/>
    <rule ref="Generic.Files.ByteOrderMark"/>
    <rule ref="Generic.Files.LineLength.TooLong">
        <properties>
            <property name="lineLimit" value="120"/>
            <property name="absoluteLineLimit" value="120"/>
            <property name="ignoreComments" value="true"/>
        </properties>
    </rule>
    <!-- Ensure there is a single class/interface/trait per file -->
    <rule ref="Generic.Files.OneObjectStructurePerFile"/>
    <!-- Force whitespace after a type cast -->
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <!--
    <rule ref="Generic.Formatting.SpaceAfterNot"/>&lt;!&ndash; Force whitespace after `!` &ndash;&gt;
    -->
    <!--Ensures that variables are not passed by reference when calling a function.-->
    <rule ref="Generic.Functions.CallTimePassByReference"/>
    <!-- Checks how many level deep that code is nested within a function. -->
    <rule ref="Generic.Metrics.NestingLevel">
        <properties>
            <!-- Warnings. Ideally should be 2 -->
            <property name="nestingLevel" value="5"/>
            <!-- Errors. Ideally should be 3 -->
            <property name="absoluteNestingLevel" value="5"/>
        </properties>
    </rule>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <!-- Forbid backtick operator -->
    <rule ref="Generic.PHP.BacktickOperator"/>
    <!-- Forbid any content before opening tag -->
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
    <!-- Forbid deprecated functions -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <!-- Forbid short open tag -->
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    <!-- Array values are specified by using a string representation of the array. -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="array_push" value="null"/>
                <element key="chop" value="rtrim"/>
                <element key="close" value="closedir"/>
                <element key="create_function" value="null"/>
                <!-- See https://youtu.be/8rdTSYljts4?t=2932 -->
                <element key="extract" value="null"/>
                <element key="compact" value="null"/>
                <element key="delete" value="unset"/>
                <element key="doubleval" value="floatval"/>
                <element key="fputs" value="fwrite"/>
                <element key="ini_alter" value="ini_alter"/>
                <element key="is_double" value="is_float"/>
                <element key="is_integer" value="is_int"/>
                <element key="is_long" value="is_int"/>
                <element key="is_null" value="null"/>
                <element key="is_real" value="is_float"/>
                <element key="is_writeable" value="is_writable"/>
                <element key="join" value="implode"/>
                <element key="key_exists" value="array_key_exists"/>
                <element key="pos" value="current"/>
                <element key="print" value="echo"/>
                <element key="show_source" value="highlight_file"/>
                <element key="sizeof" value="count"/>
                <element key="strchr" value="strstr"/>
                <element key="die" value="null"/>
                <element key="exit" value="null"/>
                <element key="env" value="config"/>
                <element key="intval" value="(int)"/>
                <element key="floatval" value="(float)"/>
                <element key="doubleval" value="(float)"/>
                <element key="boolval" value="(bool)"/>
                <element key="strval" value="(string)"/>
                <element key="mt_rand" value="random_int"/>
                <element key="rand" value="random_int"/>
                <element key="var_dump" value="null"/>
            </property>
        </properties>
        <!-- Added to ignore env() in config files, it's better to remove it and use env() in a separate rule. -->
        <exclude-pattern>.config/*</exclude-pattern>
    </rule>
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <!-- But multiline is useful for readability -->
        <properties>
            <property name="allowMultiline" value="true"/>
        </properties>
    </rule>
    <!-- Detects merge conflict artifacts left in files -->
    <rule ref="Generic.VersionControl.GitMergeConflict"/>
    <!-- Generic ruleset end. -->

    <!-- @see https://github.com/squizlabs/PHP_CodeSniffer/issues/3875 , remove the exclusion when then fix it released plus update min version -->
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <exclude name="Generic.WhiteSpace.ScopeIndent.IncorrectExact"/>
    </rule>

    <!-- Zend ruleset: -->
    <!-- Runs the Zend Code Analyzer (from Zend Studio) on the file. -->
    <rule ref="Zend.Debug.CodeAnalyzer"/>
    <!-- Zend ruleset end. -->

    <!-- SlevomatCoding ruleset: -->
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation"/>
    <!-- Array must have keys specified for either all or none of the values. -->
    <rule ref="SlevomatCodingStandard.Arrays.DisallowPartiallyKeyed"/>
    <rule ref="SlevomatCodingStandard.Arrays.MultiLineArrayEndBracketPlacement"/>
    <rule ref="SlevomatCodingStandard.Arrays.SingleLineArrayWhitespace"/>
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>
    <rule ref="SlevomatCodingStandard.Attributes.AttributeAndTargetSpacing">
        <!-- For code like private function processUser(Member $member, #[\SensitiveParameter] string $password): void -->
        <exclude name="SlevomatCodingStandard.Attributes.AttributeAndTargetSpacing.IncorrectLinesCountBetweenAttributeAndTarget"/>
    </rule>
    <rule ref="SlevomatCodingStandard.Attributes.DisallowAttributesJoining"/>
    <rule ref="SlevomatCodingStandard.Attributes.DisallowMultipleAttributesPerLine"/>
    <rule ref="SlevomatCodingStandard.Attributes.RequireAttributeAfterDocComment"/>
    <rule ref="SlevomatCodingStandard.Classes.BackedEnumTypeSpacing"/>
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility"/>
    <rule ref="SlevomatCodingStandard.Classes.ClassLength"/>
    <rule ref="SlevomatCodingStandard.Classes.ClassMemberSpacing"/>
    <rule ref="SlevomatCodingStandard.Classes.ConstantSpacing"/>
    <rule ref="SlevomatCodingStandard.Classes.DisallowLateStaticBindingForConstants"/>
    <rule ref="SlevomatCodingStandard.Classes.DisallowMultiConstantDefinition"/>
    <rule ref="SlevomatCodingStandard.Classes.DisallowMultiPropertyDefinition"/>
    <rule ref="SlevomatCodingStandard.Classes.DisallowStringExpressionPropertyFetch"/>
    <rule ref="SlevomatCodingStandard.Classes.EnumCaseSpacing"/>
    <rule ref="SlevomatCodingStandard.Classes.MethodSpacing"/>
    <rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference"/>
    <rule ref="SlevomatCodingStandard.Classes.ParentCallSpacing"/>
    <rule ref="SlevomatCodingStandard.Classes.PropertyDeclaration"/>
    <rule ref="SlevomatCodingStandard.Classes.PropertySpacing"/>
    <rule ref="SlevomatCodingStandard.Classes.RequireAbstractOrFinal"/>
    <rule ref="SlevomatCodingStandard.Classes.RequireMultiLineMethodSignature"/>
    <rule ref="SlevomatCodingStandard.Classes.RequireSelfReference"/>
    <rule ref="SlevomatCodingStandard.Classes.RequireSingleLineMethodSignature"/>
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousErrorNaming"/>
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousExceptionNaming"/>
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming"/>
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousTraitNaming"/>
    <rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration"/>
    <rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="0"/>
            <property name="linesCountAfterLastUseWhenLastInClass" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.UselessLateStaticBinding"/>
    <rule ref="SlevomatCodingStandard.Commenting.DeprecatedAnnotationDeclaration"/>
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
        <properties>
            <property name="linesCountBetweenDescriptionAndAnnotations" value="0"/>
            <property name="linesCountBetweenAnnotationsGroups" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations"/>
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
        <properties>
            <property name="forbiddenCommentPatterns" type="array">
                <element value="~^(?:(?!private|protected|static)\S+ )?(?:con|de)structor\.\z~i"/>
                <element value="~^Created by .+\.\z~i"/>
                <element value="~^(User|Date|Time): \S+\z~i"/>
                <element value="~^\S+ [gs]etter\.\z~i"/>
                <element value="~^(Class|Trait|Enum) \S+\z~i"/>
                <element value="~^(Method|Function) \S+\z~i"/>
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration">
        <exclude name="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration.MissingVariable"/>
        <include-pattern>routes/</include-pattern>
    </rule>
    <rule ref="SlevomatCodingStandard.Commenting.RequireOneLineDocComment"/>
    <rule ref="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment"/>
    <rule ref="SlevomatCodingStandard.Commenting.UselessFunctionDocComment"/>
    <rule ref="SlevomatCodingStandard.Complexity.Cognitive"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.BlockControlStructureSpacing">
        <exclude name="SlevomatCodingStandard.ControlStructures.BlockControlStructureSpacing.IncorrectLinesCountBeforeControlStructure"/>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowTrailingMultiLineTernaryOperator"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>
    <!-- Requires new with parentheses. -->
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireMultiLineCondition"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireMultiLineTernaryOperator">
        <properties>
            <property name="lineLengthLimit" value="120"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceEqualOperator"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullSafeObjectOperator"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireSingleLineCondition"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireTernaryOperator"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator"/>
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>
    <rule ref="SlevomatCodingStandard.Exceptions.RequireNonCapturingCatch"/>
    <rule ref="SlevomatCodingStandard.Files.FileLength"/>
    <rule ref="SlevomatCodingStandard.Functions.ArrowFunctionDeclaration">
        <properties>
            <property name="spacesCountAfterKeyword" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Functions.DisallowEmptyFunction"/>
    <rule ref="SlevomatCodingStandard.Functions.DisallowNamedArguments">
        <exclude-pattern>tests/*\.php</exclude-pattern>
    </rule>
    <rule ref="SlevomatCodingStandard.Functions.DisallowTrailingCommaInCall"/>
    <rule ref="SlevomatCodingStandard.Functions.DisallowTrailingCommaInClosureUse">
        <properties>
            <property name="onlySingleLine" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Functions.DisallowTrailingCommaInDeclaration"/>
    <!-- Forbid long functions and methods -->
    <rule ref="SlevomatCodingStandard.Functions.FunctionLength">
        <properties>
            <!-- Default value is 20. -->
            <property name="maxLinesLength" value="40"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Functions.RequireArrowFunction">
        <properties>
            <!-- Allow using long function syntax: in some case it's more readable -->
            <property name="enable" value="false"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Functions.RequireSingleLineCall"/>
<!--    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInClosureUse"/>-->
    <rule ref="SlevomatCodingStandard.Functions.StaticClosure"/>
    <rule ref="SlevomatCodingStandard.Functions.StrictCall"/>
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue"/>
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation">
        <properties>
            <property name="ignoredAnnotationNames" type="array">
                <element value="@phpstan-type"/>
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalConstants"/>
    <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine"/>
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration"/>
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing"/>
    <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="true"/>
        </properties>
        <severity>6</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing">
        <properties>
            <property name="linesCountBetweenUseTypes" value="1"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias"/>
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators"/>
    <rule ref="SlevomatCodingStandard.Operators.NegationOperatorSpacing"/>
    <rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator"/>
    <rule ref="SlevomatCodingStandard.Operators.RequireOnlyStandaloneIncrementAndDecrementOperators"/>
    <rule ref="SlevomatCodingStandard.Operators.SpreadOperatorSpacing"/>
    <rule ref="SlevomatCodingStandard.PHP.DisallowDirectMagicInvokeCall"/>
    <rule ref="SlevomatCodingStandard.PHP.DisallowReference">
        <!-- function() use (&$user) -->
        <exclude name="SlevomatCodingStandard.PHP.DisallowReference.DisallowedInheritingVariableByReference"/>
        <exclude name="SlevomatCodingStandard.PHP.DisallowReference.DisallowedAssigningByReference"/>
        <exclude name="SlevomatCodingStandard.PHP.DisallowReference.DisallowedPassingByReference"/>
    </rule>
    <rule ref="SlevomatCodingStandard.PHP.ForbiddenClasses"/>
    <rule ref="SlevomatCodingStandard.PHP.OptimizedFunctionsWithoutUnpacking"/>
    <rule ref="SlevomatCodingStandard.PHP.ReferenceSpacing"/>
    <rule ref="SlevomatCodingStandard.PHP.RequireNowdoc"/>
    <rule ref="SlevomatCodingStandard.PHP.ShortList"/>
    <rule ref="SlevomatCodingStandard.PHP.TypeCast"/>
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>
    <rule ref="SlevomatCodingStandard.Strings.DisallowVariableParsing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="declareOnFirstLine" value="true"/>
            <property name="spacesCountAroundEqualsSign" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.DisallowMixedTypeHint"/>
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
    <rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition"/>
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
        <!-- Native type hints may break inheritance -->
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint"/>
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="\Illuminate\Database\Eloquent\Collection"/>
                <element value="\Illuminate\Support\Collection"/>
                <element value="\Illuminate\Pagination\AbstractCursorPaginator"/>
                <element value="\Illuminate\Pagination\AbstractPaginator"/>
                <element value="\Illuminate\Pagination\CursorPaginator"/>
                <element value="\Illuminate\Pagination\LengthAwarePaginator"/>
                <element value="\Illuminate\Pagination\Paginator"/>
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="\Illuminate\Database\Eloquent\Collection"/>
                <element value="\Illuminate\Support\Collection"/>
                <element value="\Illuminate\Pagination\AbstractCursorPaginator"/>
                <element value="\Illuminate\Pagination\AbstractPaginator"/>
                <element value="\Illuminate\Pagination\CursorPaginator"/>
                <element value="\Illuminate\Pagination\LengthAwarePaginator"/>
                <element value="\Illuminate\Pagination\Paginator"/>
            </property>
        </properties>
        <!-- Not compatible with Laravel, @see https://github.com/slevomat/coding-standard/issues/1203 -->
        <exclude name="SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint"/>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="\Illuminate\Database\Eloquent\Collection"/>
                <element value="\Illuminate\Support\Collection"/>
                <element value="\Illuminate\Pagination\AbstractCursorPaginator"/>
                <element value="\Illuminate\Pagination\AbstractPaginator"/>
                <element value="\Illuminate\Pagination\CursorPaginator"/>
                <element value="\Illuminate\Pagination\LengthAwarePaginator"/>
                <element value="\Illuminate\Pagination\Paginator"/>
            </property>
        </properties>
        <!-- Not compatible with Laravel -->
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint"/>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.UnionTypeHintFormat"/>
    <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint"/>
    <rule ref="SlevomatCodingStandard.Variables.DisallowSuperGlobalVariable"/>
    <rule ref="SlevomatCodingStandard.Variables.DisallowVariableVariable"/>
    <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable"/>
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable"/>
    <rule ref="SlevomatCodingStandard.Whitespaces.DuplicateSpaces"/>
    <!-- SlevomatCoding end. -->

    <!-- Squiz ruleset: -->
    <!-- Don't use a space like $array [$key] -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <!-- Checks for empty catch clause without a comment. -->
    <rule ref="Squiz.Commenting.EmptyCatchComment"/>
    <!-- Force phpDoc alignment -->
    <rule ref="Squiz.Commenting.DocCommentAlignment">
        <!-- Allow extra spaces after star, i.e. for indented annotations -->
        <exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar"/>
    </rule>
    <!-- Force rules for function PHPDoc -->
    <rule ref="Squiz.Commenting.FunctionComment">
        <!-- Allow `@throws` without description -->
        <exclude name="Squiz.Commenting.FunctionComment.EmptyThrows"/>
        <!-- Does not work properly with PHP 7 / short-named types -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName"/>
        <!-- Does not support collections, i.e. `string[]` -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectTypeHint"/>
        <!-- Forces incorrect types -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturn"/>
        <!-- Breaks with compound return types, i.e. `string|null` -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturnNotVoid"/>
        <!-- Breaks when all params are not documented -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidTypeHint"/>
        <!-- Doc comment is not required for every method -->
        <exclude name="Squiz.Commenting.FunctionComment.Missing"/>
        <!-- Do not require comments for `@param` -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/>
        <!-- Do not require `@param` for all parameters -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamTag"/>
        <!-- Do not require `@return` for void methods -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingReturn"/>
        <!-- Comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>
        <!-- Comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital"/>
        <!-- Breaks when all params are not documented -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamNameNoMatch"/>
        <!-- Doesn't respect inheritance -->
        <exclude name="Squiz.Commenting.FunctionComment.ScalarTypeHintMissing"/>
        <!-- This does not work with intersection params like `@param Payer&Model $payer` -->
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType"/>
        <!-- We use one space after `@param` PHPDoc annotation (the rule forces using 3 spaces) -->
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamName"/>
        <!-- Doesn't work with self as typehint -->
        <exclude name="Squiz.Commenting.FunctionComment.TypeHintMissing"/>
        <!-- It is too strict - we are more flexible -->
        <exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop"/>
    </rule>
    <!-- Forbid class being in a file with different name -->
    <rule ref="Squiz.Classes.ClassFileName"/>
    <!-- Forbid `AND` and `OR`, require `&&` and `||` -->
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>
    <!-- Force camelCase variables -->
    <rule ref="Squiz.NamingConventions.ValidVariableName">
        <!-- Eloquent attributes -->
        <exclude name="Squiz.NamingConventions.ValidVariableName.MemberNotCamelCaps"/>
        <exclude name="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore"/>
    </rule>
    <!-- Forbid `global` -->
    <rule ref="Squiz.PHP.GlobalKeyword"/>
    <!-- Require PHP function calls in lowercase -->
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <!-- Discourages the use of debug functions. -->
    <rule ref="Squiz.PHP.DiscouragedFunctions"/>
    <!-- Warns about code that can never been executed. -->
    <rule ref="Squiz.PHP.NonExecutableCode"/>
    <!-- Verifies that class members have scope modifiers. -->
    <rule ref="Squiz.Scope.MemberVarScope"/>
    <!-- Checks for usage of $this in static methods, which will cause runtime errors. -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>
    <!-- Makes sure there are no spaces around the concatenation operator. -->
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <!-- Use singular quotes by default -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage.NotRequired"/>
    <!-- Forbid braces around string in `echo` -->
    <rule ref="Squiz.Strings.EchoedStrings"/>
    <!-- Require space around logical operators -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
    <!-- Forbid superfluous whitespaces -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <!-- Turned on by PSR2 -> turning back off -->
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>
    <!-- Forbid spaces around `->` operator -->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <!-- It's like PRS-12 OperatorSpacing rule, but has do not check for concatenation -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <!-- Forbid spaces before semicolon `;` -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <!-- Turned off by PSR2 -> turning back on -->
        <severity>5</severity>
    </rule>
    <!-- Squiz ruleset end. -->

    <!--IxDFCodingStandard custom rules: -->
    <rule ref="IxDFCodingStandard.Functions.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <!-- Laravel's helpers (Facades and/or DI should be used instead): -->
                <element key="auth" value="null"/>
                <element key="app" value="null"/>
                <element key="resolve" value="null"/>
                <element key="back" value="redirect()-&gt;back"/>
                <element key="blank" value="null"/>
                <element key="broadcast" value="null"/>
                <element key="cache" value="null"/>
                <element key="csrf_field" value="null"/>
                <element key="csrf_token" value="null"/>
                <element key="filled" value="null"/>
                <element key="info" value="null"/>
                <element key="logger" value="null"/>
                <element key="method_field" value="null"/>
                <element key="optional" value="null"/>
                <element key="policy" value="null"/>
                <element key="request" value="null"/>
                <element key="report" value="null"/>
                <element key="dump" value="null"/>
                <element key="dd" value="null"/>
                <element key="ray" value="null"/>
                <element key="session" value="null"/>
                <element key="validator" value="null"/>
            </property>
        </properties>
        <exclude-pattern>*/*\.blade.php</exclude-pattern>
    </rule>
    <rule ref="IxDFCodingStandard.NamingConventions.CamelCaseRouteName">
        <include-pattern>*/routes/*</include-pattern>
    </rule>
    <rule ref="IxDFCodingStandard.NamingConventions.MeaningfulVariableName">
        <properties>
            <property name="forbiddenNames" type="array">
                <element key="bool" value="Provide more context"/>
                <element key="boolean" value="Provide more context"/>
                <element key="int" value="Provide more context"/>
                <element key="integer" value="Provide more context"/>
                <element key="float" value="Provide more context"/>
                <element key="double" value="Provide more context"/>
                <element key="arr" value="Provide more context"/>
                <element key="col" value="Provide more context"/>
                <element key="coll" value="Provide more context"/>

                <element key="data" value="Avoid too generic names"/>
                <element key="vdata" value="Avoid too generic names"/>

                <element key="cnt" value="Avoid contractions"/>
                <element key="err" value="Avoid contractions"/>
                <element key="ind" value="Avoid contractions"/>
                <element key="impl" value="Avoid contractions"/>
                <element key="iter" value="Avoid contractions"/>
                <element key="len" value="Avoid contractions"/>
                <element key="proc" value="Avoid contractions"/>
                <element key="res" value="Avoid contractions"/>
                <element key="req" value="Avoid contractions"/>
                <element key="str" value="Avoid contractions"/>
                <element key="var" value="Avoid contractions"/>

                <element key="e" value="Avoid contractions"/>
                <element key="ex" value="Avoid contractions"/>
            </property>
        </properties>
    </rule>
    <!--IxDFCodingStandard custom rules end. -->

    <exclude-pattern>*/.phpstorm.meta.php</exclude-pattern>
    <exclude-pattern>*/_ide_helper.php</exclude-pattern>
    <exclude-pattern>*/*.blade.php</exclude-pattern>
    <exclude-pattern>*/autoload.php</exclude-pattern>
    <exclude-pattern>*/vendor/*</exclude-pattern>
</ruleset>
